package com.bank.serviceImpl;

package com.oracle.serviceImpl;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;


import jakarta.transaction.Transactional;

@Service
public class TransactionServiceImpl implements TransactionService {

    @Autowired
    private TransactionDao transactionDao;  

    @Autowired
    private AccountDao accountDao;

    @Override
    @Transactional
    public void deposit(String customerId, BigDecimal amount) {
        Account account = accountDao.findByCustomerId(customerId);
        if (account == null) {
            throw new CustomerNotFoundException("Account not found for Customer ID: " + customerId);
        }

        account.setBalance(account.getBalance().add(amount));
        
        accountDao.update(account);

        Transaction txn = new Transaction(customerId, "DEPOSIT", amount, LocalDateTime.now());
        txn.setToAccount("Self DEPOSIT");
        transactionDao.save(txn);
    }

    @Override
    @Transactional
    public void withdraw(String customerId, BigDecimal amount) {
        Account account = accountDao.findByCustomerId(customerId);
        if (account == null) {
            throw new CustomerNotFoundException("Account not found for Customer ID: " + customerId);
        }

        if (account.getBalance().compareTo(amount) < 0) {
            throw new IllegalArgumentException("Insufficient balance");
        }

        account.setBalance(account.getBalance().subtract(amount));
        accountDao.update(account);

        Transaction txn = new Transaction(customerId, "WITHDRAW", amount, LocalDateTime.now());
         txn.setToAccount("Self Withdraw");
        transactionDao.save(txn);
    }

    @Override
    @Transactional
    public void transfer(String fromCustomerId, String toAccountNumber, BigDecimal amount) {
        Account fromAccount = accountDao.findByCustomerId(fromCustomerId);
        if (fromAccount == null) {
            throw new CustomerNotFoundException("Sender account not found");
        }

        Account toAccount = accountDao.findByAccountNumber(toAccountNumber);
        if (toAccount == null) {
            throw new CustomerNotFoundException("Receiver account not found");
        }

        if (fromAccount.getBalance().compareTo(amount) < 0) {
            throw new IllegalArgumentException("Insufficient balance for transfer");
        }

        fromAccount.setBalance(fromAccount.getBalance().subtract(amount));
        toAccount.setBalance(toAccount.getBalance().add(amount));

        accountDao.update(fromAccount);
        accountDao.update(toAccount);

        Transaction txn = new Transaction(fromCustomerId, "TRANSFER", amount, LocalDateTime.now(), toAccountNumber);
        txn.setToAccount(toAccountNumber);
        transactionDao.save(txn);
    }
     @Override
    public List<Transaction> getTransactionHistory(String customerId) {
        return transactionDao.findByCustomerId(customerId);
    }
}