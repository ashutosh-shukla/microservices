package com.bank.controller;


import com.oracle.services.AccountService;
import com.oracle.model.entity.Account;
import com.oracle.model.entity.Customer;
import com.oracle.model.entity.Transaction;
import com.oracle.services.CustomerService;
import com.oracle.services.TransactionService;

import java.math.BigDecimal;
import java.util.Collections;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.ui.Model;

@Controller
@RequestMapping("/customers")
public class CustomerController {

    @Autowired
    private CustomerService service;

    @Autowired
    private AccountService accountService;

    @Autowired
    private TransactionService transactionService;

    // Registration
    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        model.addAttribute("customer", new Customer());
        return "register";
    }

    @PostMapping("/registerCustomer")
    public String registerCustomer(@ModelAttribute("customer") Customer customer, Model model) {
        service.createCustomer(customer);
        model.addAttribute("message", "Customer registered successfully!");
        return "hello";
    }


@GetMapping("/dashboard/{customerId}")
public String dashboard(@PathVariable String customerId, Model model) {
    Customer customer = service.getCustomer(customerId);
    if (customer == null) {
        model.addAttribute("error", "Customer not found!");
        return "CustomerNotFound"; // CustomerNotFound.jsp
    }

    Account account = accountService.getAccountByCustomerId(customerId);
    if (account == null) {
        model.addAttribute("error", "Account not found for customer. Possibly due to pending KYC.");
        return "AccountNotFound"; // AccountNotFound.jsp
    }

    model.addAttribute("customer", customer);
    model.addAttribute("account", account);
    return "customerDashboard"; // customerDashboard.jsp
}



    // Deposit
    @GetMapping("/depositPage/{customerId}")
    public String depositPage(@PathVariable String customerId, Model model) {
        model.addAttribute("customerId", customerId);
        return "deposit";
    }

    @PostMapping("/deposit")
    public String deposit(@RequestParam String customerId, @RequestParam BigDecimal amount) {
        accountService.deposit(customerId, amount);
        return "redirect:/customers/dashboard/" + customerId;
    }


    // Transfer
    @GetMapping("/transferPage/{customerId}")
    public String transferPage(@PathVariable String customerId, Model model) {
        model.addAttribute("customerId", customerId);
        return "transfer";
    }

    @PostMapping("/transfer")
    public String transfer(@RequestParam String customerId,
                           @RequestParam String toAccountNumber,
                           @RequestParam BigDecimal amount) {
        accountService.transfer(customerId, toAccountNumber, amount);
        return "redirect:/customers/dashboard/" + customerId;
    }

    

    // Transaction History
    @GetMapping("/transactionHistory/{customerId}")
    public String transactionHistory(@PathVariable String customerId, Model model) {
        List<Transaction> transactions = transactionService.getTransactionHistory(customerId);
        model.addAttribute("transactions", transactions);
        model.addAttribute("customerId", customerId);
        return "transaction";
    }

    // Edit Profile
    @GetMapping("/editProfile/{customerId}")
    public String showEditProfile(@PathVariable String customerId, Model model) {
        Customer customer = service.getCustomer(customerId);
        model.addAttribute("customer", customer);
        return "editProfile";
    }

    @PostMapping("/updateProfile")
    public String updateProfile(@RequestParam String customerId,
                                @RequestParam String firstName,
                                @RequestParam String lastName,
                                @RequestParam String phoneNumber,
                                @RequestParam String address,
                                @RequestParam(required = false) String email,
                                @RequestParam(required = false) String currentPassword,
                                @RequestParam(required = false) String newPassword) {

        Customer existingCustomer = service.getCustomer(customerId);

        // Update basic info
        existingCustomer.setFirstName(firstName);
        existingCustomer.setLastName(lastName);
        existingCustomer.setPhoneNumber(phoneNumber);
        existingCustomer.setAddress(address);

        // Email change (optional)
        if (email != null && !email.trim().isEmpty()) {
            existingCustomer.setEmail(email);
        }

        // Password change (optional)
        if (currentPassword != null && newPassword != null &&
                !currentPassword.trim().isEmpty() && !newPassword.trim().isEmpty()) {

            service.changePassword(customerId, currentPassword, newPassword);
        }

        service.updateDetails(customerId, existingCustomer);
        return "redirect:/customers/dashboard/" + customerId + "?profileUpdated=true";
    }

}
