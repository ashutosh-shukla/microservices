package com.bank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.math.BigDecimal;
import java.util.*;

@Controller
@RequestMapping("/account")
public class AccountUIController {
    
    private final String API_GATEWAY_URL = "http://localhost:8080";
    
    @Autowired
    private RestTemplate restTemplate;
    
    // Show account details by customer ID
    @GetMapping("/customer/{customerId}")
    public String showAccountByCustomer(@PathVariable String customerId, Model model) {
        try {
            ResponseEntity<Map> response = restTemplate.getForEntity(
                API_GATEWAY_URL + "/account-api/accounts/by-customer/" + customerId, Map.class);
            model.addAttribute("account", response.getBody());
            model.addAttribute("customerId", customerId);
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch account details: " + e.getMessage());
        }
        return "account-details";
    }
    
    // Show account details by account number
    @GetMapping("/number/{accountNumber}")
    public String showAccountByNumber(@PathVariable String accountNumber, Model model) {
        try {
            ResponseEntity<Map> response = restTemplate.getForEntity(
                API_GATEWAY_URL + "/account-api/accounts/by-account/" + accountNumber, Map.class);
            model.addAttribute("account", response.getBody());
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch account details: " + e.getMessage());
        }
        return "account-details";
    }
    
    // Show transaction form
    @GetMapping("/transactions/{customerId}")
    public String showTransactionForm(@PathVariable String customerId, Model model) {
        try {
            // Get account details for the form
            ResponseEntity<Map> accountResponse = restTemplate.getForEntity(
                API_GATEWAY_URL + "/account-api/accounts/by-customer/" + customerId, Map.class);
            model.addAttribute("account", accountResponse.getBody());
            
            // Get transaction history
            ResponseEntity<List> transactionResponse = restTemplate.getForEntity(
                API_GATEWAY_URL + "/account-api/transactions/" + customerId, List.class);
            model.addAttribute("transactions", transactionResponse.getBody());
            
            model.addAttribute("customerId", customerId);
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch transaction details: " + e.getMessage());
        }
        return "account-transactions";
    }
    
    // Handle deposit through account service
    @PostMapping("/deposit")
    public String deposit(@RequestParam("customerId") String customerId,
                         @RequestParam("amount") BigDecimal amount,
                         RedirectAttributes redirectAttributes) {
        try {
            ResponseEntity<String> response = restTemplate.exchange(
                API_GATEWAY_URL + "/account-api/accounts/deposit?customerId=" + customerId + "&amount=" + amount,
                HttpMethod.PUT, null, String.class);
            redirectAttributes.addFlashAttribute("success", response.getBody());
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Deposit failed: " + e.getMessage());
        }
        return "redirect:/account/transactions/" + customerId;
    }
    
    // Handle withdrawal through account service
    @PostMapping("/withdraw")
    public String withdraw(@RequestParam("customerId") String customerId,
                          @RequestParam("amount") BigDecimal amount,
                          RedirectAttributes redirectAttributes) {
        try {
            ResponseEntity<String> response = restTemplate.exchange(
                API_GATEWAY_URL + "/account-api/accounts/withdraw?customerId=" + customerId + "&amount=" + amount,
                HttpMethod.PUT, null, String.class);
            redirectAttributes.addFlashAttribute("success", response.getBody());
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Withdrawal failed: " + e.getMessage());
        }
        return "redirect:/account/transactions/" + customerId;
    }
    
    // Handle transfer through account service
    @PostMapping("/transfer")
    public String transfer(@RequestParam("fromCustomerId") String fromCustomerId,
                          @RequestParam("toAccountNumber") String toAccountNumber,
                          @RequestParam("amount") BigDecimal amount,
                          RedirectAttributes redirectAttributes) {
        try {
            ResponseEntity<String> response = restTemplate.exchange(
                API_GATEWAY_URL + "/account-api/accounts/transfer?fromCustomerId=" + fromCustomerId + 
                "&toAccountNumber=" + toAccountNumber + "&amount=" + amount,
                HttpMethod.PUT, null, String.class);
            redirectAttributes.addFlashAttribute("success", response.getBody());
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Transfer failed: " + e.getMessage());
        }
        return "redirect:/account/transactions/" + fromCustomerId;
    }
    
    // Show account management page
    @GetMapping("/manage/{customerId}")
    public String showAccountManagement(@PathVariable String customerId, Model model) {
        try {
            ResponseEntity<Map> response = restTemplate.getForEntity(
                API_GATEWAY_URL + "/account-api/accounts/by-customer/" + customerId, Map.class);
            model.addAttribute("account", response.getBody());
            model.addAttribute("customerId", customerId);
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch account details: " + e.getMessage());
        }
        return "account-management";
    }
    
    // Health check
    @GetMapping("/health")
    @ResponseBody
    public String healthCheck() {
        try {
            String response = restTemplate.getForObject(API_GATEWAY_URL + "/health/account", String.class);
            return "Frontend UP - Account Service: " + response;
        } catch (Exception e) {
            return "Frontend UP - Account Service DOWN: " + e.getMessage());
        }
    }
}
