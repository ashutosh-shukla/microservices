package com.bank.controller;

import com.bank.services.AdminService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/admin/api")
@CrossOrigin(origins = "http://localhost:7071")
public class AdminRestController {
    
    @Autowired
    private AdminService adminService;
    
    @GetMapping("/health")
    public String healthCheck() {
        return "Admin Service is UP";
    }
    
    @GetMapping("/dashboard/stats")
    public ResponseEntity<Map<String, Object>> getDashboardStats() {
        try {
            Map<String, Object> stats = adminService.getDashboardStats();
            return ResponseEntity.ok(stats);
        } catch (Exception e) {
            Map<String, Object> error = new HashMap<>();
            error.put("error", "Failed to fetch dashboard statistics: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }
    
    // Customer Management APIs
    @GetMapping("/customers")
    public ResponseEntity<List<Map<String, Object>>> getAllCustomers() {
        try {
            List<Map<String, Object>> customers = adminService.getAllCustomers();
            return ResponseEntity.ok(customers);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    @GetMapping("/customers/{customerId}")
    public ResponseEntity<Map<String, Object>> getCustomerById(@PathVariable String customerId) {
        try {
            Map<String, Object> customer = adminService.getCustomerById(customerId);
            return ResponseEntity.ok(customer);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }
    
    @PutMapping("/customers/{customerId}/status")
    public ResponseEntity<Map<String, String>> updateCustomerStatus(
            @PathVariable String customerId, 
            @RequestBody Map<String, String> request) {
        try {
            String status = request.get("status");
            adminService.updateCustomerStatus(customerId, status);
            
            Map<String, String> response = new HashMap<>();
            response.put("message", "Customer status updated successfully");
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, String> error = new HashMap<>();
            error.put("error", "Failed to update customer status: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }
    
    @PutMapping("/customers/{customerId}/kyc-status")
    public ResponseEntity<Map<String, String>> updateKycStatus(
            @PathVariable String customerId, 
            @RequestBody Map<String, String> request) {
        try {
            String status = request.get("status");
            adminService.updateKycStatus(customerId, status);
            
            Map<String, String> response = new HashMap<>();
            response.put("message", "KYC status updated successfully");
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, String> error = new HashMap<>();
            error.put("error", "Failed to update KYC status: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }
    
    @DeleteMapping("/customers/{customerId}")
    public ResponseEntity<Map<String, String>> deleteCustomer(@PathVariable String customerId) {
        try {
            adminService.deleteCustomer(customerId);
            
            Map<String, String> response = new HashMap<>();
            response.put("message", "Customer deleted successfully");
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, String> error = new HashMap<>();
            error.put("error", "Failed to delete customer: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }
    
    // Account Management APIs
    @GetMapping("/accounts")
    public ResponseEntity<List<Map<String, Object>>> getAllAccounts() {
        try {
            List<Map<String, Object>> accounts = adminService.getAllAccounts();
            return ResponseEntity.ok(accounts);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    @GetMapping("/accounts/customer/{customerId}")
    public ResponseEntity<Map<String, Object>> getAccountByCustomerId(@PathVariable String customerId) {
        try {
            Map<String, Object> account = adminService.getAccountByCustomerId(customerId);
            return ResponseEntity.ok(account);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }
    
    @PutMapping("/accounts/{accountNumber}/status")
    public ResponseEntity<Map<String, String>> updateAccountStatus(
            @PathVariable String accountNumber, 
            @RequestBody Map<String, String> request) {
        try {
            String status = request.get("status");
            adminService.updateAccountStatus(accountNumber, status);
            
            Map<String, String> response = new HashMap<>();
            response.put("message", "Account status updated successfully");
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, String> error = new HashMap<>();
            error.put("error", "Failed to update account status: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }
    
    // KYC Management APIs
    @GetMapping("/kyc")
    public ResponseEntity<List<Map<String, Object>>> getAllKYCDocuments() {
        try {
            List<Map<String, Object>> kycDocuments = adminService.getAllKYCDocuments();
            return ResponseEntity.ok(kycDocuments);
        } catch (Exception e) {
            return ResponseEntity.badRequest().build();
        }
    }
    
    @GetMapping("/kyc/{id}")
    public ResponseEntity<Map<String, Object>> getKYCDocumentById(@PathVariable Long id) {
        try {
            Map<String, Object> kycDocument = adminService.getKYCDocumentById(id);
            return ResponseEntity.ok(kycDocument);
        } catch (Exception e) {
            return ResponseEntity.notFound().build();
        }
    }
    
    @PutMapping("/kyc/{id}/status")
    public ResponseEntity<Map<String, String>> updateKYCStatus(
            @PathVariable Long id, 
            @RequestBody Map<String, String> request) {
        try {
            String status = request.get("status");
            adminService.updateKYCDocumentStatus(id, status);
            
            Map<String, String> response = new HashMap<>();
            response.put("message", "KYC status updated successfully");
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, String> error = new HashMap<>();
            error.put("error", "Failed to update KYC status: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }
    
    @DeleteMapping("/kyc/{id}")
    public ResponseEntity<Map<String, String>> deleteKYCDocument(@PathVariable Long id) {
        try {
            adminService.deleteKYCDocument(id);
            
            Map<String, String> response = new HashMap<>();
            response.put("message", "KYC document deleted successfully");
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, String> error = new HashMap<>();
            error.put("error", "Failed to delete KYC document: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }
    
    @PutMapping("/kyc/{kycId}/link-customer/{customerId}")
    public ResponseEntity<Map<String, String>> linkKYCToCustomer(
            @PathVariable Long kycId, 
            @PathVariable String customerId) {
        try {
            adminService.linkKYCToCustomer(kycId, customerId);
            
            Map<String, String> response = new HashMap<>();
            response.put("message", "KYC linked to customer successfully");
            return ResponseEntity.ok(response);
        } catch (Exception e) {
            Map<String, String> error = new HashMap<>();
            error.put("error", "Failed to link KYC to customer: " + e.getMessage());
            return ResponseEntity.badRequest().body(error);
        }
    }
}
