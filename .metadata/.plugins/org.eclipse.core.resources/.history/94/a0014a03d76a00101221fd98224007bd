package com.bank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bank.services.AdminService;

import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/admin")
public class AdminController {
    
    @Autowired
    private AdminService adminService;
    
    
    //new
    
    @GetMapping("/admin")
    public String showAdminPanel(Model model) {
        List<KycDocument> documents = kycDocumentService.getAllDocuments();
        model.addAttribute("documents", documents);
        return "admin-panel-simple";
    }
    
    @GetMapping("/admin/view/{id}")
    public String viewDocument(@PathVariable Long id, Model model) {
        Optional<KycDocument> documentOpt = kycDocumentService.getDocumentById(id);
        if (documentOpt.isPresent()) {
            model.addAttribute("document", documentOpt.get());
            return "document-view";
        } else {
            return "redirect:/kyc/admin?error=Document not found";
        }
    }
    
    @PostMapping("/admin/update-status/{id}")
    public String updateStatus(@PathVariable Long id, 
                            @RequestParam String status,
                            RedirectAttributes redirectAttributes) {
        try {
            kycDocumentService.updateDocumentStatus(id, status);
            redirectAttributes.addFlashAttribute("success", "Status updated successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Error updating status");
        }
        return "redirect:/kyc/admin";
    }
    
    @PostMapping("/admin/delete/{id}")
    public String deleteDocument(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        try {
            kycDocumentService.deleteDocument(id);
            redirectAttributes.addFlashAttribute("success", "Document deleted successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Error deleting document");
        }
        return "redirect:/kyc/admin";
    }
    
    
    //end
    
    
    
    
    
    
    // Main Dashboard
    @GetMapping("/dashboard")
    public String viewDashboard(Model model) {
        try {
            Map<String, Object> stats = adminService.getDashboardStats();
            model.addAttribute("stats", stats);
            
            // Get recent data
            List<Map<String, Object>> recentCustomers = adminService.getAllCustomers();
            List<Map<String, Object>> recentKYC = adminService.getAllKYCDocuments();
            
            model.addAttribute("recentCustomers", recentCustomers.size() > 10 ? recentCustomers.subList(0, 10) : recentCustomers);
            model.addAttribute("recentKYC", recentKYC.size() > 10 ? recentKYC.subList(0, 10) : recentKYC);
            
        } catch (Exception e) {
            model.addAttribute("error", "Unable to load dashboard data: " + e.getMessage());
        }
        return "admin-dashboard";
    }
    
    // Customer Management
    @GetMapping("/customers")
    public String viewAllCustomers(Model model) {
        try {
            List<Map<String, Object>> customers = adminService.getAllCustomers();
            model.addAttribute("customers", customers);
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch customers: " + e.getMessage());
        }
        return "admin-customers";
    }
    
    @GetMapping("/customers/{customerId}")
    public String viewCustomerDetails(@PathVariable String customerId, Model model) {
        try {
            Map<String, Object> customer = adminService.getCustomerById(customerId);
            model.addAttribute("customer", customer);
            
            // Try to get associated account
            try {
                Map<String, Object> account = adminService.getAccountByCustomerId(customerId);
                model.addAttribute("account", account);
            } catch (Exception e) {
                model.addAttribute("accountError", "No account found for this customer");
            }
            
        } catch (Exception e) {
            model.addAttribute("error", "Customer not found: " + e.getMessage());
        }
        return "admin-customer-details";
    }
    
    @PostMapping("/customers/update-status")
    public String updateCustomerStatus(@RequestParam String customerId, 
                                     @RequestParam String status,
                                     RedirectAttributes redirectAttributes) {
        try {
            adminService.updateCustomerStatus(customerId, status);
            redirectAttributes.addFlashAttribute("success", "Customer status updated successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Failed to update customer status: " + e.getMessage());
        }
        return "redirect:/admin/customers";
    }
    
    @PostMapping("/customers/update-kyc-status")
    public String updateKycStatus(@RequestParam String customerId, 
                                @RequestParam String status,
                                RedirectAttributes redirectAttributes) {
        try {
            adminService.updateKycStatus(customerId, status);
            redirectAttributes.addFlashAttribute("success", "KYC status updated successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Failed to update KYC status: " + e.getMessage());
        }
        return "redirect:/admin/customers";
    }
    
    @PostMapping("/customers/delete/{customerId}")
    public String deleteCustomer(@PathVariable String customerId, RedirectAttributes redirectAttributes) {
        try {
            adminService.deleteCustomer(customerId);
            redirectAttributes.addFlashAttribute("success", "Customer deleted successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Failed to delete customer: " + e.getMessage());
        }
        return "redirect:/admin/customers";
    }
    
    // Account Management
    @GetMapping("/accounts")
    public String viewAllAccounts(Model model) {
        try {
            List<Map<String, Object>> accounts = adminService.getAllAccounts();
            model.addAttribute("accounts", accounts);
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch accounts: " + e.getMessage());
        }
        return "admin-accounts";
    }
    
    // KYC Management
    @GetMapping("/kyc")
    public String viewAllKYC(Model model) {
        try {
            List<Map<String, Object>> kycDocuments = adminService.getAllKYCDocuments();
            model.addAttribute("kycDocuments", kycDocuments);
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch KYC documents: " + e.getMessage());
        }
        return "admin-kyc";
    }
    
    @GetMapping("/kyc/{id}")
    public String viewKYCDetails(@PathVariable Long id, Model model) {
        try {
            Map<String, Object> kycDocument = adminService.getKYCDocumentById(id);
            model.addAttribute("kycDocument", kycDocument);
            
            // Get associated customer if linked
            Object customerIdObj = kycDocument.get("customer_id");
            if (customerIdObj != null) {
                try {
                    Map<String, Object> customer = adminService.getCustomerById(customerIdObj.toString());
                    model.addAttribute("customer", customer);
                } catch (Exception e) {
                    model.addAttribute("customerError", "Associated customer not found");
                }
            }
            
        } catch (Exception e) {
            model.addAttribute("error", "KYC document not found: " + e.getMessage());
        }
        return "admin-kyc-details";
    }
    
    @PostMapping("/kyc/update-status")
    public String updateKYCStatus(@RequestParam Long id, 
                                @RequestParam String status,
                                RedirectAttributes redirectAttributes) {
        try {
            adminService.updateKYCDocumentStatus(id, status);
            redirectAttributes.addFlashAttribute("success", "KYC status updated successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Failed to update KYC status: " + e.getMessage());
        }
        return "redirect:/admin/kyc";
    }
    
    @PostMapping("/kyc/delete/{id}")
    public String deleteKYC(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        try {
            adminService.deleteKYCDocument(id);
            redirectAttributes.addFlashAttribute("success", "KYC document deleted successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Failed to delete KYC document: " + e.getMessage());
        }
        return "redirect:/admin/kyc";
    }
}
