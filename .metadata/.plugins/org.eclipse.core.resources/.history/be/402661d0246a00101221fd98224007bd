package com.bank.controller;


import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;



import java.io.IOException;
import java.util.List;
import java.util.Optional;

@Controller
@RequestMapping("/kyc")
public class KYCController {
    
    @Autowired
    private KYCDocumentService kycDocumentService;
    
    @GetMapping("/upload")
    public String showUploadForm(Model model) {
        return "kyc-upload";
    }
    
    @PostMapping("/upload")
    public String uploadKycDocuments(
            @RequestParam("fullName") String fullName,
            @RequestParam("email") String email,
            @RequestParam("phoneNumber") String phoneNumber,
            @RequestParam("aadharFront") MultipartFile aadharFront,
            @RequestParam("aadharBack") MultipartFile aadharBack,
            @RequestParam("panFront") MultipartFile panFront,
            @RequestParam("panBack") MultipartFile panBack,
            @RequestParam("photograph") MultipartFile photograph,
            RedirectAttributes redirectAttributes) {
    
    try {
        // Validate required fields
        if (fullName == null || fullName.trim().isEmpty() || 
            email == null || email.trim().isEmpty() || 
            phoneNumber == null || phoneNumber.trim().isEmpty()) {
            redirectAttributes.addFlashAttribute("error", "All personal details are required");
            return "redirect:/kyc/upload";
        }
        
        // Validate email format
        if (!email.matches("^[A-Za-z0-9+_.-]+@(.+)$")) {
            redirectAttributes.addFlashAttribute("error", "Please enter a valid email address");
            return "redirect:/kyc/upload";
        }
        
        // Validate phone number format
        if (!phoneNumber.matches("^[0-9]{10}$")) {
            redirectAttributes.addFlashAttribute("error", "Please enter a valid 10-digit phone number");
            return "redirect:/kyc/upload";
        }
        
        KYCDocument savedDocument = kycDocumentService.saveKycDocument(
            fullName.trim(), email.trim(), phoneNumber.trim(), 
            aadharFront, aadharBack, panFront, panBack, photograph
        );
        
        redirectAttributes.addFlashAttribute("success", 
            "KYC documents uploaded successfully! Reference ID: " + savedDocument.getId());
        
    } catch (IOException e) {
        redirectAttributes.addFlashAttribute("error", "File validation error: " + e.getMessage());
    } catch (RuntimeException e) {
        redirectAttributes.addFlashAttribute("error", e.getMessage());
    } catch (Exception e) {
        redirectAttributes.addFlashAttribute("error", "An unexpected error occurred. Please try again.");
    }
    
    return "redirect:/kyc/upload";
}
    
    @GetMapping("/admin")
    public String showAdminPanel(Model model) {
        List<KycDocument> documents = kycDocumentService.getAllDocuments();
        model.addAttribute("documents", documents);
        return "admin-panel-simple";
    }
    
    @GetMapping("/admin/view/{id}")
    public String viewDocument(@PathVariable Long id, Model model) {
        Optional<KycDocument> documentOpt = kycDocumentService.getDocumentById(id);
        if (documentOpt.isPresent()) {
            model.addAttribute("document", documentOpt.get());
            return "document-view";
        } else {
            return "redirect:/kyc/admin?error=Document not found";
        }
    }
    
    @PostMapping("/admin/update-status/{id}")
    public String updateStatus(@PathVariable Long id, 
                             @RequestParam String status,
                             RedirectAttributes redirectAttributes) {
        try {
            kycDocumentService.updateDocumentStatus(id, status);
            redirectAttributes.addFlashAttribute("success", "Status updated successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Error updating status");
        }
        return "redirect:/kyc/admin";
    }
    
    @PostMapping("/admin/delete/{id}")
    public String deleteDocument(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        try {
            kycDocumentService.deleteDocument(id);
            redirectAttributes.addFlashAttribute("success", "Document deleted successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Error deleting document");
        }
        return "redirect:/kyc/admin";
    }
}
