package com.bank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bank.model.Customer;

import java.math.BigDecimal;
import java.util.*;

@Controller
@RequestMapping("/customer")
public class CustomerUIController {
    
    private final String API_GATEWAY_URL = "http://localhost:8080";
    
    @Autowired
    private RestTemplate restTemplate;
    
    // Show customer registration form
    @GetMapping("/register")
    public String showRegistrationForm(Model model) {
        if (!model.containsAttribute("customer")) {
            model.addAttribute("customer", new Customer());
        }
        return "register";
    }
    // Handle customer registration
    @PostMapping("/registerCustomer")
    public String registerCustomer(
            @ModelAttribute("customer") Customer customer,
            RedirectAttributes redirectAttributes) {
        
        try {
            Map<String, Object> customerData = new HashMap<>();
            customerData.put("firstName", customer.getFirstName());
            customerData.put("lastName", customer.getLastName());
            customerData.put("email", customer.getEmail());
            customerData.put("phoneNumber", customer.getPhoneNumber());
            customerData.put("address", customer.getAddress());
            customerData.put("dateOfBirth", customer.getDateOfBirth());
            customerData.put("password", customer.getPassword());
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<Map<String, Object>> entity = new HttpEntity<>(customerData, headers);
            
            ResponseEntity<Map> response = restTemplate.postForEntity(
                API_GATEWAY_URL + "/customers/register", entity, Map.class);
            
            if (response.getStatusCode() == HttpStatus.OK) {
                Map<String, Object> responseBody = response.getBody();
                String generatedCustomerId = (String) responseBody.get("customerId");
                
                redirectAttributes.addFlashAttribute("success",
                    "Customer registered successfully! Customer ID: " + generatedCustomerId);
                return "redirect:/customer/dashboard/" + generatedCustomerId;
            }
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error",
                "Registration failed: " + e.getMessage());
        }
        
        return "redirect:/customer/register";
    }
    
    // Show customer dashboard
        
        @GetMapping("/dashboard/{customerId}")
        public String showDashboard(@PathVariable String customerId, Model model) {
            try {
                // Get customer details
                ResponseEntity<Map> customerResponse = restTemplate.getForEntity(
                    API_GATEWAY_URL + "/customers/" + customerId, Map.class);
                
                if (customerResponse.getStatusCode() == HttpStatus.OK) {
                    model.addAttribute("customer", customerResponse.getBody());
                    
                    // Try to get account details
                    try {
                        ResponseEntity<Map> accountResponse = restTemplate.getForEntity(
                            API_GATEWAY_URL + "/account-api/customers/" + customerId + "/account", Map.class);
                        
                        if (accountResponse.getStatusCode() == HttpStatus.OK) {
                            Map<String, Object> account = accountResponse.getBody();
                            model.addAttribute("account", account);
                            model.addAttribute("hasAccount", true);
                        } else {
                            model.addAttribute("hasAccount", false);
                            model.addAttribute("accountMessage", "No account present. KYC verification pending.");
                        }
                        
                    } catch (Exception e) {
                        model.addAttribute("hasAccount", false);
                        model.addAttribute("accountMessage", "Account service unavailable. Please try again later.");
                        System.err.println("Account service error: " + e.getMessage());
                    }
                    
                } else {
                    model.addAttribute("error", "Customer not found");
                }
                
            } catch (Exception e) {
                model.addAttribute("error", "Unable to fetch customer details: " + e.getMessage());
            }
            
            return "customer-dashboard";
        }
        
        // Other methods...
    }
    
    // Handle deposit
    @PostMapping("/deposit/{customerId}")
    public String deposit(@PathVariable String customerId,
                         @RequestParam("amount") BigDecimal amount,
                         RedirectAttributes redirectAttributes) {
        try {
            restTemplate.postForObject(
                API_GATEWAY_URL + "/customers/" + customerId + "/deposit?amount=" + amount,
                null, String.class);
            redirectAttributes.addFlashAttribute("success", "Amount deposited successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Deposit failed: " + e.getMessage());
        }
        return "redirect:/customer/dashboard/" + customerId;
    }
    
    // Handle withdrawal
    @PostMapping("/withdraw/{customerId}")
    public String withdraw(@PathVariable String customerId,
                          @RequestParam("amount") BigDecimal amount,
                          RedirectAttributes redirectAttributes) {
        try {
            restTemplate.postForObject(
                API_GATEWAY_URL + "/customers/" + customerId + "/withdraw?amount=" + amount,
                null, String.class);
            redirectAttributes.addFlashAttribute("success", "Amount withdrawn successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Withdrawal failed: " + e.getMessage());
        }
        return "redirect:/customer/dashboard/" + customerId;
    }
    
    // Handle transfer
    @PostMapping("/transfer/{customerId}")
    public String transfer(@PathVariable String customerId,
                          @RequestParam("toAccountNumber") String toAccountNumber,
                          @RequestParam("amount") BigDecimal amount,
                          RedirectAttributes redirectAttributes) {
        try {
            restTemplate.postForObject(
                API_GATEWAY_URL + "/customers/" + customerId + "/transfer?toAccountNumber=" + 
                toAccountNumber + "&amount=" + amount, null, String.class);
            redirectAttributes.addFlashAttribute("success", "Amount transferred successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Transfer failed: " + e.getMessage());
        }
        return "redirect:/customer/dashboard/" + customerId;
    }
    
    // Show customer profile
    @GetMapping("/profile/{customerId}")
    public String showProfile(@PathVariable String customerId, Model model) {
        try {
            ResponseEntity<Map> response = restTemplate.getForEntity(
                API_GATEWAY_URL + "/customers/" + customerId, Map.class);
            model.addAttribute("customer", response.getBody());
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch customer profile: " + e.getMessage());
        }
        return "customer-profile";
    }
    
    // Handle password change
    @PostMapping("/change-password/{customerId}")
    public String changePassword(@PathVariable String customerId,
                                @RequestParam("currentPassword") String currentPassword,
                                @RequestParam("newPassword") String newPassword,
                                RedirectAttributes redirectAttributes) {
        try {
            restTemplate.put(API_GATEWAY_URL + "/customers/" + customerId + 
                "/change-password?currentPassword=" + currentPassword + 
                "&newPassword=" + newPassword, null);
            redirectAttributes.addFlashAttribute("success", "Password changed successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Password change failed: " + e.getMessage());
        }
        return "redirect:/customer/profile/" + customerId;
    }
    
    // Health check
    @GetMapping("/health")
    @ResponseBody
    public String healthCheck() {
        try {
            String response = restTemplate.getForObject(API_GATEWAY_URL + "/health/customer", String.class);
            return "Frontend UP - Customer Service: " + response;
        } catch (Exception e) {
            return "Frontend UP - Customer Service DOWN: " + e.getMessage();
        }
    }
}
