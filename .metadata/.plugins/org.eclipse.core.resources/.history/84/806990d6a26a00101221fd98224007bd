package com.bank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ByteArrayResource;
import org.springframework.http.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.util.LinkedMultiValueMap;
import org.springframework.util.MultiValueMap;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import java.util.*;

@Controller
@RequestMapping("/kyc")
public class UIController {
    
    private final String KYC_SERVICE_URL = "http://localhost:8080/kyc/api";
    
    @Autowired
    private RestTemplate restTemplate;
    
    // Show upload form to user
    @GetMapping("/form")
    public String showUploadForm() {
        return "kyc-upload"; // WEB-INF/views/kyc-upload.jsp
    }
    
    // Handle file upload - calls backend service
    @PostMapping("/upload")
    public String uploadKYCDocuments(
            @RequestParam("fullName") String fullName,
            @RequestParam("email") String email,
            @RequestParam("phoneNumber") String phoneNumber,
            @RequestParam("aadharFront") MultipartFile aadharFront,
            @RequestParam("aadharBack") MultipartFile aadharBack,
            @RequestParam("panFront") MultipartFile panFront,
            @RequestParam("panBack") MultipartFile panBack,
            @RequestParam("photograph") MultipartFile photograph,
            RedirectAttributes redirectAttributes) {
        
        try {
            // Create multipart request
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.MULTIPART_FORM_DATA);
            
            MultiValueMap<String, Object> body = new LinkedMultiValueMap<>();
            body.add("fullName", fullName);
            body.add("email", email);
            body.add("phoneNumber", phoneNumber);
            
            // Add files as ByteArrayResource
            if (!aadharFront.isEmpty()) {
                body.add("aadharFront", new ByteArrayResource(aadharFront.getBytes()) {
                    @Override
                    public String getFilename() {
                        return aadharFront.getOriginalFilename();
                    }
                });
            }
            
            if (!aadharBack.isEmpty()) {
                body.add("aadharBack", new ByteArrayResource(aadharBack.getBytes()) {
                    @Override
                    public String getFilename() {
                        return aadharBack.getOriginalFilename();
                    }
                });
            }
            
            if (!panFront.isEmpty()) {
                body.add("panFront", new ByteArrayResource(panFront.getBytes()) {
                    @Override
                    public String getFilename() {
                        return panFront.getOriginalFilename();
                    }
                });
            }
            
            if (!panBack.isEmpty()) {
                body.add("panBack", new ByteArrayResource(panBack.getBytes()) {
                    @Override
                    public String getFilename() {
                        return panBack.getOriginalFilename();
                    }
                });
            }
            
            if (!photograph.isEmpty()) {
                body.add("photograph", new ByteArrayResource(photograph.getBytes()) {
                    @Override
                    public String getFilename() {
                        return photograph.getOriginalFilename();
                    }
                });
            }
            
            HttpEntity<MultiValueMap<String, Object>> requestEntity = new HttpEntity<>(body, headers);
            
            // Call backend service
            ResponseEntity<Map> response = restTemplate.postForEntity(
                KYC_SERVICE_URL + "/upload", 
                requestEntity, 
                Map.class
            );
            
            if (response.getStatusCode() == HttpStatus.OK) {
                Map<String, Object> responseBody = response.getBody();
                redirectAttributes.addFlashAttribute("success", 
                    "KYC documents uploaded successfully! Reference ID: " + responseBody.get("id"));
            }
            
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", 
                "Upload failed: " + e.getMessage());
        }
        
        return "redirect:/kyc/form";
    }
    
    // Admin panel - fetch all documents
    @GetMapping("/admin")
    public String showAdmin(Model model) {
        try {
            ResponseEntity<List> response = restTemplate.getForEntity(
                KYC_SERVICE_URL + "/admin", List.class);
            model.addAttribute("documents", response.getBody());
        } catch (Exception e) {
            model.addAttribute("error", "Unable to fetch KYC documents: " + e.getMessage());
        }
        return "admin-panel-simple";
    }
    
    // View specific document
    @GetMapping("/admin/view/{id}")
    public String viewDocument(@PathVariable Long id, Model model) {
        try {
            ResponseEntity<Map> response = restTemplate.getForEntity(
                KYC_SERVICE_URL + "/admin/view/" + id, Map.class);
            model.addAttribute("document", response.getBody());
            return "document-view";
        } catch (Exception e) {
            return "redirect:/kyc/admin?error=Document not found";
        }
    }
    
    // Delete document
    @PostMapping("/admin/delete/{id}")
    public String deleteDocument(@PathVariable Long id, RedirectAttributes redirectAttributes) {
        try {
            restTemplate.postForObject(KYC_SERVICE_URL + "/admin/delete/" + id, null, String.class);
            redirectAttributes.addFlashAttribute("success", "Document deleted successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Error deleting document: " + e.getMessage());
        }
        return "redirect:/kyc/admin";
    }
    
    // Update document status
    @PostMapping("/admin/update-status/{id}")
    public String updateStatus(@PathVariable Long id,
                               @RequestParam("status") String status,
                               RedirectAttributes redirectAttributes) {
        try {
            Map<String, String> request = new HashMap<>();
            request.put("status", status);
            
            HttpHeaders headers = new HttpHeaders();
            headers.setContentType(MediaType.APPLICATION_JSON);
            HttpEntity<Map<String, String>> entity = new HttpEntity<>(request, headers);
            
            restTemplate.postForObject(KYC_SERVICE_URL + "/admin/update-status/" + id, entity, String.class);
            redirectAttributes.addFlashAttribute("success", "Status updated successfully");
        } catch (Exception e) {
            redirectAttributes.addFlashAttribute("error", "Failed to update status: " + e.getMessage());
        }
        return "redirect:/kyc/admin";
    }
    
    // Health check endpoint
    @GetMapping("/health")
    @ResponseBody
    public String healthCheck() {
        try {
            String response = restTemplate.getForObject(KYC_SERVICE_URL + "/health", String.class);
            return "Frontend UP - Backend: " + response;
        } catch (Exception e) {
            return "Frontend UP - Backend DOWN: " + e.getMessage();
        }
    }
}
