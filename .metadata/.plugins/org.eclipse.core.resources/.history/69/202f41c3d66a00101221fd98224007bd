package com.bank.serviceImpl;

import com.bank.dao.AdminDao;
import com.bank.services.AdminService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Service
@Transactional
public class AdminServiceImpl implements AdminService {
    
    @Autowired
    private AdminDao adminDao;
    
    @Override
    public List<Map<String, Object>> getAllCustomers() {
        return adminDao.getAllCustomers();
    }
    
    @Override
    public Map<String, Object> getCustomerById(String customerId) {
        Map<String, Object> customer = adminDao.getCustomerById(customerId);
        if (customer == null) {
            throw new RuntimeException("Customer with ID " + customerId + " not found");
        }
        return customer;
    }
    
    @Override
    public void updateCustomerStatus(String customerId, String status) {
        Map<String, Object> customer = adminDao.getCustomerById(customerId);
        if (customer == null) {
            throw new RuntimeException("Customer with ID " + customerId + " not found");
        }
        adminDao.updateCustomerStatus(customerId, status);
    }
    
    @Override
    public void updateKycStatus(String customerId, String status) {
        Map<String, Object> customer = adminDao.getCustomerById(customerId);
        if (customer == null) {
            throw new RuntimeException("Customer with ID " + customerId + " not found");
        }
        
        adminDao.updateKycStatus(customerId, status);
        
        // If KYC approved, create account automatically
        if ("APPROVED".equalsIgnoreCase(status)) {
            adminDao.createAccountForCustomer(customerId);
        }
    }
    
    @Override
    public void deleteCustomer(String customerId) {
        Map<String, Object> customer = adminDao.getCustomerById(customerId);
        if (customer == null) {
            throw new RuntimeException("Customer with ID " + customerId + " not found");
        }
        adminDao.deleteCustomer(customerId);
    }
    
    @Override
    public List<Map<String, Object>> getAllAccounts() {
        return adminDao.getAllAccounts();
    }
    
    @Override
    public Map<String, Object> getAccountByCustomerId(String customerId) {
        Map<String, Object> account = adminDao.getAccountByCustomerId(customerId);
        if (account == null) {
            throw new RuntimeException("Account for customer " + customerId + " not found");
        }
        return account;
    }
    
    @Override
    public void updateAccountStatus(String accountNumber, String status) {
        adminDao.updateAccountStatus(accountNumber, status);
    }
    
    @Override
    public List<Map<String, Object>> getAllKYCDocuments() {
        return adminDao.getAllKYCDocuments();
    }
    
    @Override
    public Map<String, Object> getKYCDocumentById(Long id) {
        Map<String, Object> kycDocument = adminDao.getKYCDocumentById(id);
        if (kycDocument == null) {
            throw new RuntimeException("KYC Document with ID " + id + " not found");
        }
        return kycDocument;
    }
    
    @Override
    public void updateKYCDocumentStatus(Long id, String status) {
        Map<String, Object> kycDocument = adminDao.getKYCDocumentById(id);
        if (kycDocument == null) {
            throw new RuntimeException("KYC Document with ID " + id + " not found");
        }
        
        adminDao.updateKYCDocumentStatus(id, status);
        
        // If KYC document is approved and linked to customer, update customer KYC status
        if ("APPROVED".equalsIgnoreCase(status) && kycDocument.get("customerId") != null) {
            String customerId = kycDocument.get("customerId").toString();
            if (!customerId.isEmpty()) {
                updateKycStatus(customerId, "APPROVED");
            }
        }
    }
    
    @Override
    public void deleteKYCDocument(Long id) {
        Map<String, Object> kycDocument = adminDao.getKYCDocumentById(id);
        if (kycDocument == null) {
            throw new RuntimeException("KYC Document with ID " + id + " not found");
        }
        adminDao.deleteKYCDocument(id);
    }
    
    @Override
    public void linkKYCToCustomer(Long kycId, String customerId) {
        Map<String, Object> kycDocument = adminDao.getKYCDocumentById(kycId);
        if (kycDocument == null) {
            throw new RuntimeException("KYC Document with ID " + kycId + " not found");
        }
        
        Map<String, Object> customer = adminDao.getCustomerById(customerId);
        if (customer == null) {
            throw new RuntimeException("Customer with ID " + customerId + " not found");
        }
        
        adminDao.linkKYCToCustomer(kycId, customerId);
    }
    
    @Override
    public Map<String, Object> getDashboardStats() {
        Map<String, Object> stats = new HashMap<>();
        stats.put("totalCustomers", adminDao.getTotalCustomers());
        stats.put("totalAccounts", adminDao.getTotalAccounts());
        stats.put("pendingKYC", adminDao.getKYCCountByStatus("PENDING"));
        stats.put("approvedKYC", adminDao.getKYCCountByStatus("APPROVED"));
        stats.put("rejectedKYC", adminDao.getKYCCountByStatus("REJECTED"));
        return stats;
    }
    
    @Override
    public List<Map<String, Object>> getTransactionsByCustomerId(String customerId) {
        return adminDao.getTransactionsByCustomerId(customerId);
    }
}
