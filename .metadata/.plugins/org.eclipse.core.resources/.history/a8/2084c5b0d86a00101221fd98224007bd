package com.bank.dao;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;
import java.util.Map;

@Repository
public class AdminDao {
    
    @Autowired
    private JdbcTemplate jdbcTemplate;
    
    // Customer Management - Pure SQL queries on existing tables
    public List<Map<String, Object>> getAllCustomers() {
        String sql = "SELECT customer_id, first_name, last_name, email, phone_number, status, kyc_status, created_at FROM customers ORDER BY created_at DESC";
        return jdbcTemplate.queryForList(sql);
    }
    
    public Map<String, Object> getCustomerById(String customerId) {
        String sql = "SELECT customer_id, first_name, last_name, email, phone_number, status, kyc_status, created_at, updated_at FROM customers WHERE customer_id = ?";
        List<Map<String, Object>> results = jdbcTemplate.queryForList(sql, customerId);
        return results.isEmpty() ? null : results.get(0);
    }
    
    public void updateCustomerStatus(String customerId, String status) {
        String sql = "UPDATE customers SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE customer_id = ?";
        jdbcTemplate.update(sql, status, customerId);
    }
    
    public void updateKycStatus(String customerId, String kycStatus) {
        String sql = "UPDATE customers SET kyc_status = ?, updated_at = CURRENT_TIMESTAMP WHERE customer_id = ?";
        jdbcTemplate.update(sql, kycStatus, customerId);
    }
    
    public void deleteCustomer(String customerId) {
        // Delete associated account first if exists
        String deleteAccountSql = "DELETE FROM accounts WHERE customer_id = ?";
        jdbcTemplate.update(deleteAccountSql, customerId);
        
        // Delete customer
        String deleteCustomerSql = "DELETE FROM customers WHERE customer_id = ?";
        jdbcTemplate.update(deleteCustomerSql, customerId);
    }
    
    // Account Management - Pure SQL queries on existing tables
    public List<Map<String, Object>> getAllAccounts() {
        String sql = "SELECT a.id, a.account_number, a.customer_id, a.account_type, a.balance, a.status, a.opened_date, c.first_name, c.last_name " +
                    "FROM accounts a LEFT JOIN customers c ON a.customer_id = c.customer_id ORDER BY a.opened_date DESC";
        return jdbcTemplate.queryForList(sql);
    }
    
    public Map<String, Object> getAccountByCustomerId(String customerId) {
        String sql = "SELECT a.id, a.account_number, a.customer_id, a.account_type, a.balance, a.status, a.opened_date, c.first_name, c.last_name " +
                    "FROM accounts a LEFT JOIN customers c ON a.customer_id = c.customer_id WHERE a.customer_id = ?";
        List<Map<String, Object>> results = jdbcTemplate.queryForList(sql, customerId);
        return results.isEmpty() ? null : results.get(0);
    }
    
    public void updateAccountStatus(String accountNumber, String status) {
        String sql = "UPDATE accounts SET status = ?, updated_at = CURRENT_TIMESTAMP WHERE account_number = ?";
        jdbcTemplate.update(sql, status, accountNumber);
    }
    
    // KYC Management - Pure SQL queries on existing tables
    public List<Map<String, Object>> getAllKYCDocuments() {
        String sql = "SELECT id, full_name, email, phone_number, customer_id, status, upload_date, last_modified " +
                    "FROM kyc_documents ORDER BY upload_date DESC";
        return jdbcTemplate.queryForList(sql);
    }
    
    public Map<String, Object> getKYCDocumentById(Long id) {
        String sql = "SELECT id, full_name, email, phone_number, customer_id, status, upload_date, last_modified, " +
                    "aadhar_front_filename, aadhar_back_filename, pan_front_filename, pan_back_filename, photograph_filename " +
                    "FROM kyc_documents WHERE id = ?";
        List<Map<String, Object>> results = jdbcTemplate.queryForList(sql, id);
        return results.isEmpty() ? null : results.get(0);
    }
    
    public void updateKYCDocumentStatus(Long id, String status) {
        String sql = "UPDATE kyc_documents SET status = ?, last_modified = CURRENT_TIMESTAMP WHERE id = ?";
        jdbcTemplate.update(sql, status, id);
    }
    
    public void deleteKYCDocument(Long id) {
        String sql = "DELETE FROM kyc_documents WHERE id = ?";
        jdbcTemplate.update(sql, id);
    }
    
    public void linkKYCToCustomer(Long kycId, String customerId) {
        String sql = "UPDATE kyc_documents SET customer_id = ?, last_modified = CURRENT_TIMESTAMP WHERE id = ?";
        jdbcTemplate.update(sql, customerId, kycId);
    }
    
    // Statistics - Count from existing tables
    public long getTotalCustomers() {
        String sql = "SELECT COUNT(*) FROM customers";
        return jdbcTemplate.queryForObject(sql, Long.class);
    }
    
    public long getTotalAccounts() {
        String sql = "SELECT COUNT(*) FROM accounts";
        return jdbcTemplate.queryForObject(sql, Long.class);
    }
    
    public long getKYCCountByStatus(String status) {
        String sql = "SELECT COUNT(*) FROM kyc_documents WHERE status = ?";
        return jdbcTemplate.queryForObject(sql, Long.class, status);
    }
    
    // Create account for approved KYC (if needed)
    public void createAccountForCustomer(String customerId) {
        // Check if account already exists
        String checkSql = "SELECT COUNT(*) FROM accounts WHERE customer_id = ?";
        long count = jdbcTemplate.queryForObject(checkSql, Long.class, customerId);
        
        if (count == 0) {
            // Generate account number
            String accountNumber = "ACC" + System.currentTimeMillis();
            
            String sql = "INSERT INTO accounts (account_number, customer_id, account_type, balance, currency, status, opened_date, created_at, updated_at) " +
                        "VALUES (?, ?, 'SAVINGS', 0.00, 'INR', 'ACTIVE', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)";
            jdbcTemplate.update(sql, accountNumber, customerId);
        }
    }
    
    // Get transactions for a customer (if transactions table exists)
    public List<Map<String, Object>> getTransactionsByCustomerId(String customerId) {
        try {
            String sql = "SELECT t.id, t.transaction_type, t.amount, t.balance_after, t.description, t.transaction_date " +
                        "FROM transactions t JOIN accounts a ON t.account_id = a.id WHERE a.customer_id = ? ORDER BY t.transaction_date DESC";
            return jdbcTemplate.queryForList(sql, customerId);
        } catch (Exception e) {
            // If transactions table doesn't exist, return empty list
            return List.of();
        }
    }
}
