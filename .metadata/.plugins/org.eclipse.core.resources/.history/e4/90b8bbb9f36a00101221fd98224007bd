package com.bank.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.*;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;
import java.math.BigDecimal;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@Controller
@RequestMapping("/customers")
public class AccountUIController {

    @Autowired
    private CustomerServiceClient customerServiceClient;
    
    @Autowired
    private AccountServiceClient accountServiceClient;

    // Deposit Page
    @GetMapping("/depositPage/{customerId}")
    public String depositPage(@PathVariable String customerId, Model model) {
        try {
            Customer customer = customerServiceClient.getCustomerById(customerId);
            if (!"APPROVED".equals(customer.getStatus())) {
                model.addAttribute("error", "Account not approved for banking operations");
                return "redirect:/customer/dashboard/" + customerId;
            }
            
            Account account = accountServiceClient.getAccountByCustomerId(customerId);
            model.addAttribute("customerId", customerId);
            model.addAttribute("account", account);
            return "deposit";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading deposit page: " + e.getMessage());
            return "redirect:/customer/dashboard/" + customerId;
        }
    }

    // Process Deposit
    @PostMapping("/deposit/{customerId}")
    public String processDeposit(@PathVariable String customerId, 
                               @RequestParam BigDecimal amount, 
                               Model model) {
        try {
            Customer customer = customerServiceClient.getCustomerById(customerId);
            if (!"APPROVED".equals(customer.getStatus())) {
                model.addAttribute("error", "Account not approved for banking operations");
                return "redirect:/customer/dashboard/" + customerId;
            }

            accountServiceClient.deposit(customerId, amount);
            model.addAttribute("success", "Deposit successful! Amount: $" + amount);
            model.addAttribute("customerId", customerId);
            
            // Reload account info
            Account account = accountServiceClient.getAccountByCustomerId(customerId);
            model.addAttribute("account", account);
            
            return "deposit";
        } catch (Exception e) {
            model.addAttribute("error", "Deposit failed: " + e.getMessage());
            model.addAttribute("customerId", customerId);
            return "deposit";
        }
    }

    // Withdrawal Page
    @GetMapping("/withdrawlPage/{customerId}")
    public String withdrawalPage(@PathVariable String customerId, Model model) {
        try {
            Customer customer = customerServiceClient.getCustomerById(customerId);
            if (!"APPROVED".equals(customer.getStatus())) {
                model.addAttribute("error", "Account not approved for banking operations");
                return "redirect:/customer/dashboard/" + customerId;
            }
            
            Account account = accountServiceClient.getAccountByCustomerId(customerId);
            model.addAttribute("customerId", customerId);
            model.addAttribute("account", account);
            return "withdraw";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading withdrawal page: " + e.getMessage());
            return "redirect:/customer/dashboard/" + customerId;
        }
    }

    // Process Withdrawal
    @PostMapping("/withdraw/{customerId}")
    public String processWithdrawal(@PathVariable String customerId, 
                                  @RequestParam BigDecimal amount, 
                                  Model model) {
        try {
            Customer customer = customerServiceClient.getCustomerById(customerId);
            if (!"APPROVED".equals(customer.getStatus())) {
                model.addAttribute("error", "Account not approved for banking operations");
                return "redirect:/customer/dashboard/" + customerId;
            }

            accountServiceClient.withdraw(customerId, amount);
            model.addAttribute("success", "Withdrawal successful! Amount: $" + amount);
            model.addAttribute("customerId", customerId);
            
            // Reload account info
            Account account = accountServiceClient.getAccountByCustomerId(customerId);
            model.addAttribute("account", account);
            
            return "withdraw";
        } catch (Exception e) {
            model.addAttribute("error", "Withdrawal failed: " + e.getMessage());
            model.addAttribute("customerId", customerId);
            
            // Reload account info for display
            try {
                Account account = accountServiceClient.getAccountByCustomerId(customerId);
                model.addAttribute("account", account);
            } catch (Exception ex) {
                // Handle gracefully
            }
            
            return "withdraw";
        }
    }

    // Transfer Page
    @GetMapping("/transferPage/{customerId}")
    public String transferPage(@PathVariable String customerId, Model model) {
        try {
            Customer customer = customerServiceClient.getCustomerById(customerId);
            if (!"APPROVED".equals(customer.getStatus())) {
                model.addAttribute("error", "Account not approved for banking operations");
                return "redirect:/customer/dashboard/" + customerId;
            }
            
            Account account = accountServiceClient.getAccountByCustomerId(customerId);
            model.addAttribute("customerId", customerId);
            model.addAttribute("account", account);
            return "transfer";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading transfer page: " + e.getMessage());
            return "redirect:/customer/dashboard/" + customerId;
        }
    }

    // Process Transfer
    @PostMapping("/transfer/{customerId}")
    public String processTransfer(@PathVariable String customerId,
                                @RequestParam String toAccountNumber,
                                @RequestParam BigDecimal amount,
                                Model model) {
        try {
            Customer customer = customerServiceClient.getCustomerById(customerId);
            if (!"APPROVED".equals(customer.getStatus())) {
                model.addAttribute("error", "Account not approved for banking operations");
                return "redirect:/customer/dashboard/" + customerId;
            }

            accountServiceClient.transfer(customerId, toAccountNumber, amount);
            model.addAttribute("success", "Transfer successful! Amount: $" + amount + " to " + toAccountNumber);
            model.addAttribute("customerId", customerId);
            
            // Reload account info
            Account account = accountServiceClient.getAccountByCustomerId(customerId);
            model.addAttribute("account", account);
            
            return "transfer";
        } catch (Exception e) {
            model.addAttribute("error", "Transfer failed: " + e.getMessage());
            model.addAttribute("customerId", customerId);
            
            // Reload account info for display
            try {
                Account account = accountServiceClient.getAccountByCustomerId(customerId);
                model.addAttribute("account", account);
            } catch (Exception ex) {
                // Handle gracefully
            }
            
            return "transfer";
        }
    }

    // Transaction History
    @GetMapping("/transactionHistory/{customerId}")
    public String transactionHistory(@PathVariable String customerId, Model model) {
        try {
            Customer customer = customerServiceClient.getCustomerById(customerId);
            if (!"APPROVED".equals(customer.getStatus())) {
                model.addAttribute("error", "Account not approved for banking operations");
                return "redirect:/customer/dashboard/" + customerId;
            }

            List<Transaction> transactions = accountServiceClient.getTransactionHistory(customerId);
            model.addAttribute("transactions", transactions);
            model.addAttribute("customerId", customerId);
            return "transactionHistory";
        } catch (Exception e) {
            model.addAttribute("error", "Error loading transaction history: " + e.getMessage());
            model.addAttribute("customerId", customerId);
            return "transactionHistory";
        }
    }
}